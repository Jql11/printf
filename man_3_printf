.TH _PRINTF(3)
.SH NAME
_printf \- print formatted output
.SH SYNOPSIS
.B int _printf(const char *format, ...);
.SH DESCRIPTION
.B _printf
is a variadic function that produces output according to a format as described below.
.B _printf
writes output to stdout, the standard output stream, similar to the printf in the C standard library; it writes the output under the control of a format string that specifies how subsequent arguments are converted for output.
.SH Format of the format string
The format is a character string which contains three types of objects:
ordinary characters (not %), enclosed in double quotes,
which are copied unchanged to the output stream;
character escape sequences which are converted and copied to the standard output (for example \n will print a new line);
and conversion specifications, each of which results in fetching zero or more subsequent arguments.
Each conversion specification is introduced by the character %, and ends with a conversion specifier.
.SH Conversion specifiers
.TP
.BR d,i
Signed decimal integer.
.TP
.BR u
Unsigned decimal integer.
.TP
.BR o
Unsigned integer in octal.
.TP
.BR x, X
Unsigned interger as a hexidecimal number. x uses lower-case letters and upper-case.
.TP
.BR b
Unsigned int argument is converted to binary.
.TP
.BR c
Char (character).
.TP
.BR s
Null-terminated string.
Characters from the array are printed up to (but not including) a terminating null nyte ('\0).
.TP
.BR %
A % is written. No argument is converted. The complete conversion specification is %%. 
.TP
.BR r
Print a string in reverse.
.TP
.BR R
Print the string encoded using ROT13.
.SH RETURN VALUE
Upon successful return,
.B _printf
return the number of characters printed (excluding the null byte used to end output to strings).
If an output error is encountered, a negative value is returned.
.SH BUGS
.B _printf
contrary to the C standard library function printf does not handle eEfFgGaAp conversion specifiers and none of the flag characters, length and precision modifiers. 